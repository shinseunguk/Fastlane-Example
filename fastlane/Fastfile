# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_require 'active_support'
fastlane_require 'active_support/core_ext/time'
fastlane_require 'dotenv'

#✅ 상수

SLACK_URL = ENV['SLACK_URL']

KEYCHAIN_NAME = ENV['KEYCHAIN_NAME']
KEYCHAIN_PASSWORD = ENV['KEYCHAIN_PASSWORD']

APP_IDENTIFIER = ENV['APP_IDENTIFIER']

MATCH_GIT_BASIC_AUTHORIZATION = ENV['MATCH_GIT_BASIC_AUTHORIZATION']

APP_STORE_CONNECT_API_KEY_KEY_ID = ENV['APP_STORE_CONNECT_API_KEY_KEY_ID']
APP_STORE_CONNECT_API_KEY_ISSUER_ID = ENV['APP_STORE_CONNECT_API_KEY_ISSUER_ID']
APP_STORE_CONNECT_API_KEY_CONTENT = ENV['APP_STORE_CONNECT_API_KEY_CONTENT']

GIT_PERSONAL_TOKEN = ENV['GIT_PERSONAL_TOKEN']

TEAM_ID = ENV['TEAM_ID']


default_platform(:ios)

platform :ios do
  lane :upload_testflight do
    begin
      app_store_connect_api_key(
        key_id: "#{APP_STORE_CONNECT_API_KEY_KEY_ID}",
        issuer_id: "#{APP_STORE_CONNECT_API_KEY_ISSUER_ID}",
        key_content: "#{APP_STORE_CONNECT_API_KEY_CONTENT}"
      )

      setup_ci

      match(
        storage_mode: "git",
        type: "appstore",
        app_identifier: ["com.ukseung.Fastlane"],
        readonly: false,
        git_basic_authorization: Base64.strict_encode64("#{GIT_PERSONAL_TOKEN}"),
        generate_apple_certs: false
      )
      
      # 빌드번호(년월일시분초)
      increment_build_number(
        xcodeproj: "Fastlane-Example.xcodeproj",
        build_number: date_based_build_number
      )

      update_project_team(
        path: "../Fastlane-Example/Fastlane-Example.xcodeproj",
        teamid: "#{TEAM_ID}"
      )

      # 앱 빌드 및 TestFlight 업로드
      build_app(
        workspace: "Fastlane-Example.xcworkspace",
        scheme: "Fastlane-Example",
        export_method: "app-store",
        export_options: {
          method: "app-store",
          signingStyle: "manual",
          provisioningProfiles: {
            "com.ukseung.Fastlane" => "match AppStore com.ukseung.Fastlane"
          }
        }
      )

      upload_to_testflight(skip_waiting_for_build_processing: true)
      send_slack_message("✅ TestFlight 배포 됐습니다 😎")
    rescue => error
      # 실패 메시지
      send_slack_message("❌ TestFlight 배포 실패했습니다 😭\nError: #{error}", false)
      raise error # 실패를 Fastlane에 전달
    end
  end

    # ✅ App Store 배포 Lane
    lane :release_app_store do
      begin
        app_store_connect_api_key(
          key_id: "#{APP_STORE_CONNECT_API_KEY_KEY_ID}",
          issuer_id: "#{APP_STORE_CONNECT_API_KEY_ISSUER_ID}",
          key_content: "#{APP_STORE_CONNECT_API_KEY_CONTENT}"
        )
  
        setup_ci
  
        match(
          storage_mode: "git",
          type: "appstore",
          app_identifier: ["com.ukseung.Fastlane"],
          readonly: false,
          git_basic_authorization: Base64.strict_encode64("#{GIT_PERSONAL_TOKEN}"),
          generate_apple_certs: false
        )
  
        increment_build_number(
          xcodeproj: "Fastlane-Example.xcodeproj",
          build_number: date_based_build_number
        )
  
        update_project_team(
          path: "../Fastlane-Example/Fastlane-Example.xcodeproj",
          teamid: "#{TEAM_ID}"
        )
  
        # 앱 빌드 및 App Store 업로드
        build_app(
          workspace: "Fastlane-Example.xcworkspace",
          scheme: "Fastlane-Example",
          export_method: "app-store",
          export_options: {
            method: "app-store",
            signingStyle: "manual",
            provisioningProfiles: {
              "com.ukseung.Fastlane" => "match AppStore com.ukseung.Fastlane"
            }
          }
        )
  
        # 8. 앱스토어 업로드 🎉
        deliver(
          submit_for_review: true,
          force: true,
          skip_screenshots: true,
          automatic_release: true,
          precheck_include_in_app_purchases: false,
          copyright: "© #{Time.now.year} COMPANY-NAME, Inc.",
          release_notes: {
            "en-US" => "WHATS NEW"
          },
          app_review_information: {
            demo_user: "demo@user.net",
            demo_password: "DEMO-PASSWORD"
          },
          submission_information: {    
            export_compliance_encryption_updated: false,
            export_compliance_uses_encryption: false,
            add_id_info_uses_idfa: false
          }
        )
  
        send_slack_message("✅ App Store 배포 완료 😎")
      rescue => error
        send_slack_message("❌ App Store 배포 실패 😭\nError: #{error}", false)
        raise error
      end
    end

  def send_slack_message(message, success = true)
    version = get_version_number(xcodeproj: "Fastlane-Example.xcodeproj") # Xcode 프로젝트의 버전 가져오기

    full_message = "iOS #{version}(#{date_based_build_number})\n\n#{message}"

    slack(
      message: full_message,
      success: success,
      slack_url: "#{SLACK_URL}"
    )
  end

  def date_based_build_number
    Time.now.in_time_zone("Asia/Seoul").strftime("%Y.%m%d.%H%M")
  end
end
